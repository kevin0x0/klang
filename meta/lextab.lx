import "charset/unicode

comment = $#[^\n\r\xFF]*
func-name = $([A-Za-z_] | [:uni-non-ascii:])([A-Za-z0-9_] | [:uni-non-ascii:])*

def let (KLTK_LET):
  $let

def global (KLTK_GLOBL):
  $global

def identifier (KLTK_ID):
  (kllexer_simple_id)  $([A-Za-z_\-] | [:uni-non-ascii:])([A-Za-z0-9_\-] | [:uni-non-ascii:])*
  (kllexer_str_id)     $'([^'\\\xFF] | \\[^\xFF])*'

def string (KLTK_STR):
  (kllexer_str)        $"([^"\\\xFF] | \\[^\xFF])*"
  (kllexer_simple_str) $`[^`]*`

def '(' (KLTK_LP):
  $\(

def ')' (KLTK_RP):
  $\)

def '[' (KLTK_LBE):
  $\[

def ']' (KLTK_RBE):
  $\]

def '{' (KLTK_LBC):
  $\{

def '}' (KLTK_RBC):
  $\}

def ',' (KLTK_COMMA):
  $,

def ':' (KLTK_COLON):
  $:

def ';' (KLTK_SEMI):
  $;

def '.' (KLTK_DOT):
  $\.

def '|' (KLTK_BAR):
  $\|

def '|>' (KLTK_PIPE):
  $\|>

def '=' (KLTK_ASSIGN):
  $=

def '=>' (KLTK_SFUNC):
  $=>

def '->' (KLTK_EFUNC):
  $->

def '<' (KLTK_LESS):
  $<

def '<=' (KLTK_NGREATER):
  $<=

def '>' (KLTK_GREATER):
  $>

def '>=' (KLTK_NLESS):
  $>=

def '==' (KLTK_EQUAL):
  $==

def '!=' (KLTK_NEQUAL):
  $!=

def '..' (KLTK_CONCAT):
  $\.\.

def '...' (KLTK_VARG):
  $\.\.\.

def blanks (KLTK_BLKS):
  $([\ \n\r\t] | [:comment:])+

def number (KLTK_NUM):
  (kllexer_num) $[0-9]+

def end (KLTK_END):
  $\xFF

%error-handler = "kllexer_err
