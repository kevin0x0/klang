#include "klang/include/parse/kllexer.h"
#include "klang/include/parse/kltokens.h"
#include <stdint.h>
#include <stdlib.h>


$r transition-table $:$;

$r start-state $:$;

$r pattern-mapping $:$;

$r info-array $:$;

typedef void Callback(KlLexer* klex);

$r callback-array $:$;


#define KLLEXER_BUFSIZE     (4096)

#define KLLEXER_DEAD_STATE  (255)
#define KLLEXER_NONACC      (-1)


static void print_error(FILE* stream, Ki* ki, const char* stream_name, size_t begin, size_t end, const char** msg, size_t msg_count);


bool kllexer_init(KlLexer* kklex, Ki* ki) {
  if (!kklex) return false;
  kklex->ki = ki;
  kklex->tok.kind = KLTOK_ERR;
  kklex->tok.begin = 0;
  kklex->tok.end = 0;
  kklex->tok.attr.string = NULL;
  if (!(kklex->buf = (uint8_t*)malloc(sizeof (uint8_t) * KLLEXER_BUFSIZE))) {
    kklex->ki = NULL;
    return false;
  }

  return true;
}

void kllexer_destroy(KlLexer* kklex) {
  kklex->ki = NULL;
  kklex->tok.kind = KLTOK_ERR;
  kklex->tok.begin = 0;
  kklex->tok.end = 0;
  kklex->tok.attr.string = NULL;
  free(kklex->buf);
  kklex->buf = NULL;
}

KlLexer* kllexer_create(Ki* ki) {
  KlLexer* kklex = (KlLexer*)malloc(sizeof (KlLexer));
  if (!kklex || !kllexer_init(kklex, ki)) {
    free(kklex);
    return false;
  }
  return true;
}

void kllexer_delete(KlLexer* kklex) {
  if (!kklex) return;
  kllexer_destroy(kklex);
}

bool kllexer_next(KlLexer* kklex) {
  size_t tokenlen = 0;
  uint8_t (*table)[256] = transition;
  uint8_t state = start;
  uint8_t next_state = 0;
  Ki* ki = kklex->ki;
  uint8_t ch = (uint8_t)ki_peek(ki);
  uint8_t* buf = kklex->buf;
  while ((next_state = table[state][ch]) != KLLEXER_DEAD_STATE && tokenlen < KLLEXER_BUFSIZE) {
    state = next_state;
    buf[tokenlen++] = ch;
    ch = (uint8_t)ki_next(ki);
  }
  KlToken* token = &kklex->tok;
  token->begin = kklex->currpos;
  token->end = kklex->currpos + tokenlen;
  kklex->currpos += tokenlen;
  token->kind = pattern_mapping[state];
  if (callbacks[state]) {
    callbacks[state](kklex);
  }
}

void kllexer_throw_error(KlLexer* klex, int severity, const char** msg, size_t msg_count) {
  switch (severity) {
    case KLLEXER_SEV_ERROR: {
      print_error(stderr, klex->ki,klex->stream_name, klex->tok.begin, klex->tok.end, msg, msg_count);
      klex->err_count++;
      break;
    }
    case KLLEXER_SEV_FATAL: {
      print_error(stderr, klex->ki,klex->stream_name, klex->tok.begin, klex->tok.end, msg, msg_count);
      exit(EXIT_FAILURE);
    }
  }
}

const char* kllexer_tok_info(KlLexer* klex, uint8_t kind) {
  (void)klex;
  return info[kind];
}

static KString* kev_get_escape_str(const char* str, size_t len);


void kllexer_simple_id(KlLexer* klex) {
  KlToken* token = &klex->tok;
  if (!(token->attr.string = kstring_create_buf((char*)klex->buf, (char*)klex->buf + token->end - token->begin))) {
    const char* msg = "out of memory";
    kllexer_throw_error(klex, KLLEXER_SEV_FATAL, &msg, 1);
  }
}

void kllexer_str_id(KlLexer* klex) {
  KlToken* token = &klex->tok;
  if (!(token->attr.string = kev_get_escape_str((char*)klex->buf + 1, token->end - token->begin - 2))) {
    const char* msg = "out of memory";
    kllexer_throw_error(klex, KLLEXER_SEV_FATAL, &msg, 1);
  }
}

void kllexer_str(KlLexer* klex) {
  KlToken* token = &klex->tok;
  if (!(token->attr.string = kev_get_escape_str((char*)klex->buf + 1, token->end - token->begin - 2))) {
    const char* msg = "out of memory";
    kllexer_throw_error(klex, KLLEXER_SEV_FATAL, &msg, 1);
  }
}

void kllexer_simple_str(KlLexer* klex) {
  KlToken* token = &klex->tok;
  if (!(token->attr.string = kstring_create_buf((char*)klex->buf + 1, (char*)klex->buf + token->end - token->begin - 1))) {
    const char* msg = "out of memory";
    kllexer_throw_error(klex, KLLEXER_SEV_FATAL, &msg, 1);
  }
}

void kllexer_num(KlLexer* klex) {
  KlToken* token = &klex->tok;
  token->attr.intval = strtol((char*)klex->buf, NULL, 10);
}

void kllexer_err(KlLexer* klex) {
  KlToken* token = &klex->tok;
  Ki* ki = klex->ki;
  uint8_t* buf = klex->buf;
  uint8_t (*table)[256] = transition;
  uint8_t state = start;
  do {
    klex->currpos++;
    size_t tokenlen = 0;
    state = start;
    uint8_t next_state = 0;
    uint8_t ch = (uint8_t)ki_peek(ki);
    while ((next_state = table[state][ch]) != KLLEXER_DEAD_STATE && tokenlen < KLLEXER_BUFSIZE) {
      state = next_state;
      buf[tokenlen++] = ch;
      ch = (uint8_t)ki_next(ki);
    }
    token->begin = klex->currpos;
    token->end = klex->currpos + tokenlen;
    klex->currpos += tokenlen;
  } while (pattern_mapping[state] == KLLEXER_NONACC);

  token->kind = pattern_mapping[state];
  if (callbacks[state]) {
    callbacks[state](klex);
  }
}

static KString* kev_get_escape_str(const char* origin, size_t len) {
  KString* ret = kstring_create_len(len + 1);
  if (!ret) return NULL;
  char* str = kstring_get_content(ret);
  size_t i = 0;
  const char* endptr = origin + len;
  while (origin != endptr) {
    if (*origin == '\\') {
      switch (*++origin) {
        case 'n': str[i++] = '\n'; break;
        case 'r': str[i++] = '\r'; break;
        case 't': str[i++] = '\t'; break;
        case '\'': str[i++] = '\''; break;
        case '\"': str[i++] = '\"'; break;
        case '\\': str[i++] = '\\'; break;
        case 'x': {
          if (*origin != '\0' && *(origin + 1) != '\0') {
            unsigned char hex = 0;
            if (*origin >= '0' && *origin <= '9')
              hex = 16 * hex + *origin - '0';
            else
              hex = 16 * hex + (*origin | 0x20) - 'a';
            if (*++origin >= '0' && *origin <= '9')
              hex = 16 * hex + *origin - '0';
            else
              hex = 16 * hex + (*origin | 0x20) - 'a';
            ++origin;
            str[i++] = hex;
          }
          break;
        }
        default: str[i++] = *origin; break;
      }
    } else {
      str[i++] = *origin;
    }
    origin++;
  }
  str[i] = '\0';
  return ret;
}

static void print_error(FILE* err_stream, Ki* ki, const char* stream_name, size_t begin, size_t end, const char** msg, size_t msg_count) {
  (void)end;
  (void)ki;

  if (!stream_name) {
    for (size_t i = 0; i < msg_count; ++i) {
      fprintf(err_stream, "%s", msg);
    }
    return;
  }

  fprintf(err_stream, "%s: ", stream_name);

  FILE* infile = fopen(stream_name, "r");
  if (!infile) exit(EXIT_FAILURE);

  size_t count = 0;
  size_t line_begin = 0;
  size_t line_no = 1;
  while (count++ < begin) {
    int ch = 0;
    if ((ch = fgetc(infile)) == EOF) {
      break;
    }
    else if (ch == '\n') {
      line_begin = ftell(infile);
      line_no++;
    }
  }
  fprintf(err_stream, "line %u: ", (unsigned int)line_no);
  for (size_t i = 0; i < msg_count; ++i) {
    fprintf(err_stream, "%s", msg);
  }
  fputc('\n', err_stream);
  fseek(infile, line_begin, SEEK_SET);
  int ch = 0;
  while ((ch = fgetc(infile)) != '\n' && ch != EOF) {
    fputc(ch, err_stream);
  }
  fputc('\n', err_stream);
  fseek(infile, line_begin, SEEK_SET);
  count = line_begin;
  while (count++ < begin) {
    ch = fgetc(infile);
    if (ch == '\t')
      fputc('\t', err_stream);
    else
      fputc(' ', err_stream);

  }
  fputc('^', err_stream);
  fputc('\n', err_stream);
  fclose(infile);
}
