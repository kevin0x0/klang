-- matrix class
local matrix {
  local a, b;
  local c, d;
  method constructor = (self, a, b, c, d) =>
    self.a, self.b, self.c, self.d = a, b, c, d;

  method mul = (self, m) =>
    self.a, self.b, self.c, self.d = 
    self.a * m.a + self.b * m.c, self.a * m.b + self.b * m.d,
    self.c * m.a + self.d * m.c, self.c * m.b + self.d * m.d;

  method copy = self -> new matrix(self.a, self.b, self.c, self.d);
};

let one = new matrix(1, 0, 0, 1);

-- exponentiation by squaring
local fastpow(res, base, exp) -> res where repeat: {
  if exp % 2 == 1: res.mul base;
  base.mul base;
} until exp == 0 where exp = exp // 2;

-- fibonacci
local f n -> fastpow(one.copy(), new matrix(1, 1, 1, 0), n).c;

print ("fibonacci(36) = " .. f 36);
